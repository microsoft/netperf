name: reset-parent-or-child

on:
  workflow_dispatch:
    inputs:
      parent-or-child:
        description: "Lab jobs to observe"
        required: true
        type: string
      vm-name:
        description: "The name of the VM to reset"
        default: "netperf-windows-2022-client"
        required: true
        type: string

jobs:
    do-reset-manual:
      name: Reset parent or child Machine
      runs-on:
        - self-hosted
        - ${{ inputs.parent-or-child }}
      steps:
        - name: RESET STATE (parent or child)
          run: |
            # TODO: Eventually, for WS 2025, we want to instead CRUD the VMs, instead of simply reseting their checkpoints here.
            $vmName = "${{ inputs.vm-name }}"
            $checkPointName = "LATEST"
            Restore-VMSnapshot -VMName $vmName -Name $checkPointName -Confirm:$false
        - name: Start VM, wait for online status, alert observer.
          run: |
            $vmName = "${{ inputs.vm-name }}"
            Start-VM -Name $vmName
            while (-not (Get-VMNetworkAdapter -VMName $vmName).IPAddresses) {
              Write-Host "Waiting for VM to be online..."
              Start-Sleep -Seconds 5
            }
            Start-Sleep 10
            $username = "${{ secrets.VM_DUMMY_USERNAME }}"
            $password = "${{ secrets.VM_DUMMY_PASSWORD }}"
            $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
            Invoke-Command -VMName $vmName -Credential $credential -ScriptBlock {
              Start-Service -Name "actions.runner.*"
              Get-Service -Name "actions.runner.*"
            }
            $headers = @{
              "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
            }
            $key = "${{ github.event.client_payload.unique_env_str }}_child_reset_done"
            $value = whoami
            $api = "https://netperfapi.azurewebsites.net/setkeyvalue?key=$key&value=$value"

            try {
              Invoke-WebRequest -Uri $api -Headers $headers -Method Post
            } catch {
              Write-Host "Failed to alert observer child reset done: $_"
              exit 1
            }
