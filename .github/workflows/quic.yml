name: QUIC

on:
  workflow_call:
    inputs:
      ref:
        description: 'MsQuic Branch or Commit'
        required: false
        default: 'main'
        type: string
      filter:
        description: 'Custom Test Filter'
        required: false
        default: ''
        type: string
      logprofile:
        description: 'Logging WPR Profile'
        required: false
        default: "NULL"
        type: string
      commit:
        description: 'Publish Results'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      ref:
        description: 'MsQuic Branch or Commit'
        required: false
        default: 'main'
        type: string
      filter:
        description: 'Custom Test Filter'
        required: false
        default: ''
        type: string
      logprofile:
        description: 'Logging WPR Profile'
        required: false
        default: "NULL"
        type: choice
        options:
          - "NULL"
          - Stacks.Light
          - Stacks.Verbose
          - Basic.Light
          - Basic.Verbose
          - Performance.Light
          - Performance.Verbose
          - RPS.Light
          - RPS.Verbose
          - Datapath.Light
          - Datapath.Verbose
          - Full.Light
          - Full.Verbose
      commit:
        description: 'Publish Results'
        required: false
        default: false
        type: boolean
  pull_request:
    branches:
    - main
    paths:
    - .github/workflows/quic.yml
    - .github/workflows/generate-summary.ps1
    - .github/workflows/quic_matrix.json
    - .github/workflows/manage-azure-vms.ps1
  repository_dispatch:
    types: [run-quic]
      # Args: { guid, sha, ref, pr, logs, filter }

concurrency:
  group: quic-${{ github.event.client_payload.pr || github.event.client_payload.sha || inputs.ref || github.event.pull_request.number || 'main' }}
  cancel-in-progress: true

permissions: write-all
jobs:
  # For automated identification of the workflow.
  name:
    name: For ${{ github.event.client_payload.guid }}
    if: ${{ github.event_name == 'repository_dispatch' }}
    needs: []
    runs-on: ubuntu-20.04
    steps:
    - run: |
        echo "Parameters from repository_dispatch:"
        echo "guid: ${{ github.event.client_payload.guid }}"
        echo "sha: ${{ github.event.client_payload.sha }}"
        echo "ref: ${{ github.event.client_payload.ref }}"
        echo "pr: ${{ github.event.client_payload.pr }}"
        echo "logs: ${{ github.event.client_payload.logs }}"
        echo "filter: ${{ github.event.client_payload.filter }}"

  #
  # Build Jobs
  #

  build-windows:
    name: Build WinUser
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
        tls: [schannel] # , openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-win.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-windows-kernel:
    name: Build WinKernel
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
    uses: microsoft/msquic/.github/workflows/build-reuse-winkernel.yml@main
    with:
      os: ${{ matrix.os }}
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-unix:
    name: Build Unix
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04']
        tls: [openssl] # , openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-unix.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  prepare-matrix:
    name: Prepare lab matrix, and Azure 1ES matrix.
    uses: microsoft/netperf/.github/workflows/prepare-matrix.yml@jackhe/1es-azure-pools
    with:
      matrix_filename: 'quic_matrix.json'
      workflowId: ${{ github.run_id }}

  run-secnetperf-1es:
    name: azure-${{ matrix.role }}-${{ matrix.os }}-${{ matrix.io }}-${{ matrix.tls }}-${{ matrix.arch }}
    needs: [build-unix, build-windows, build-windows-kernel, prepare-matrix]
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.prepare-matrix.outputs.azure-matrix)}}
    runs-on:
    - self-hosted
    - 1ES.Pool=${{ matrix.assigned_pool }}
    steps:
      - name: Print Role
        run: Write-Host "Role; ${{ matrix.role }}"
        shell: pwsh

      - name: Lowercase runner.os
        shell: pwsh
        run: echo "OS=$('${{runner.os}}'.ToLower())" >> $env:GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
        with:
          name: Release-${{env.OS}}-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-Perf
          path: artifacts

      - name: Download Kernel Artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
        if: ${{ matrix.io == 'wsk' }}
        with:
          name: Release-winkernel-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}
          path: artifacts

      - name: Disable Windows Defender / Firewall
        if: ${{ env.OS == 'windows' }}
        run: |
          # Disable Windows defender / firewall.
          Write-Host "Disabling Windows Defender / Firewall."
          netsh.exe advfirewall set allprofiles state off
          Set-MpPreference -EnableNetworkProtection Disabled
          Set-MpPreference -DisableDatagramProcessing $True
        shell: pwsh

      - name: (Server) Upload IP address to shared cache
        if: ${{ matrix.role == 'server' }}
        run: |
          if ($isWindows) {
            $ipAddress = (Get-NetIpAddress -AddressFamily IPv4).IpAddress
          } else {
            $ipAddress = ip addr | grep 'inet ' | grep '10' | awk '{print $2}' | cut -d'/' -f1
          }
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_ipaddress&value=$ipAddress" -Headers $headers
        shell: pwsh

      - name: (Server) Start Secnetperf server and polls for an ACK.
        if: ${{ matrix.role == 'server' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_ack"
          do {
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ACK. Status code: $($Response.StatusCode)"
              }
              $ack = $Response.Content
              Write-Output "ACK found: $ack"
              $found = $true
            }
            catch {
              Write-Output "Client not done testing yet. Spinning up server..."
              # We can poll for config here
              try {
                Write-Host "Spin up server. When the client wants to shut down the server, they will send a special UDP packet."
                if ($isWindows) {
                  .\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe -exec:maxtput
                } else {
                  $env:LD_LIBRARY_PATH = "$env:LD_LIBRARY_PATH:$(pwd)/artifacts/bin/linux/x64_Release_openssl"
                  chmod +x ./artifacts/bin/linux/x64_Release_openssl/secnetperf
                  ./artifacts/bin/linux/x64_Release_openssl/secnetperf -exec:maxtput
                }
              }
              catch {
                Write-Output "Exit from server: $_"
              }
            }
          } while (-not $found)
        shell: pwsh

      - name: (Client) Poll for an ip address uploaded by the server
        if: ${{ matrix.role == 'client' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_ipaddress"
          do {
            Write-Output "Checking for ip address..."
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ip address. Status code: $($Response.StatusCode)"
              }
              $ipAddress = $Response.Content
              Write-Output "Ip Address found: $ipAddress"
              if ($isWindows) {
                $serverIp = $ipAddress.Split(" ") | Where-Object { $_.StartsWith("10") } | Select-Object -First 1
              } else {
                $serverIp = $ipAddress
              }
              Write-Output "Server IP: $serverIp"
              $found = $true
            }
            catch {
              Write-Output "Ip Address not found: $_"
              Start-Sleep -Seconds 5
            }
          } while (-not $found)

          Write-Host "Preparing to run secnetperf"
          if ($isWindows) {
            "$serverIp netperf-peer" | Out-File -Encoding ASCII -Append "$env:SystemRoot\System32\drivers\etc\hosts"
            Set-Item WSMan:\localhost\Client\TrustedHosts -Value 'netperf-peer' -Force
          } else {
            echo "$serverIp netperf-peer" | sudo tee -a /etc/hosts
            $env:LD_LIBRARY_PATH = "$env:LD_LIBRARY_PATH:$(pwd)/artifacts/bin/linux/x64_Release_openssl"
            chmod +x ./artifacts/bin/linux/x64_Release_openssl/secnetperf
          }

          Write-Host "$(Get-Date) Try running secnetperf"
          $FinishedTests = $false
          $Attempts = 0
          while ($Attempts -lt 5) {
            try {
              if ($isWindows) {
                $res = .\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe -target:netperf-peer -exec:maxtput -down:12s -ptput:1 -io:iocp -pconn:1 -pstream:1
              } else {
                $res = ./artifacts/bin/linux/x64_Release_openssl/secnetperf -target:netperf-peer -exec:maxtput -down:12s -ptput:1 -io:poll -pconn:1 -pstream:1
              }
              $didFail = $res | Where-Object { $_ -like "*No Successful Connections!*" }
              if ($didFail) {
                throw "Failed to run secnetperf: $res"
              } else {
                Write-Output "secnetperf succeeded: $res"
                $FinishedTests = $true
              }
              break
            }
            catch {
              Write-Output "Failed to run secnetperf: $_"
              $Attempts += 1
              Start-Sleep -Seconds 30
            }
          }
        shell: pwsh

      - name: (Client) Upload ACK to shared cache
        if: ${{ matrix.role == 'client' }}
        run: |
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_ack&value=ack" -Headers $headers
        shell: pwsh

      - name: (Client) Tell Server to shut down
        if: ${{ matrix.role == 'client' }}
        run: |
          function Stop-RemoteServer {
              param ($RemoteAddress)
              # Ping side-channel socket on 9999 to tell the app to die
              $Socket = New-Object System.Net.Sockets.UDPClient
              $BytesToSend = @(
                  0x57, 0xe6, 0x15, 0xff, 0x26, 0x4f, 0x0e, 0x57,
                  0x88, 0xab, 0x07, 0x96, 0xb2, 0x58, 0xd1, 0x1c
              )
              $Socket.Send($BytesToSend, $BytesToSend.Length, $RemoteAddress, 9999) | Out-Null
          }

          for ($i = 0; $i -lt 5; $i++) {
            try {
              Stop-RemoteServer -RemoteAddress "netperf-peer"
            }
            catch {
              Write-Output "Failed to send special UDP packet: $_"
            }
            Start-Sleep -Seconds 5
          }
        shell: pwsh
  #
  # Test Jobs.
  # NOTE: tag == env
  #
  run-secnetperf: # This would be 1 enumeration, after CTS has setup the environment with the correct OS type and version.
    name: secnetperf
    needs: [build-unix, build-windows, build-windows-kernel, prepare-matrix]
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.prepare-matrix.outputs.full-matrix)}}
    runs-on:
    - self-hosted
    - ${{ matrix.runner_id || matrix.env }} # Use auto-generated 'runner id' if present, otherwise assign to 'env'.
    - os-${{ matrix.os }}
    - ${{ matrix.arch }}
    steps:
    - name: Checkout microsoft/msquic
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/msquic
        ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}
    - name: Lowercase runner.os
      shell: pwsh
      run: echo "OS=$('${{runner.os}}'.ToLower())" >> $env:GITHUB_ENV
    - name: Download Artifacts
      uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        name: Release-${{env.OS}}-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-Perf
        path: artifacts
    - name: Download Kernel Artifacts
      uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      if: ${{ matrix.io == 'wsk' }}
      with:
        name: Release-winkernel-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}
        path: artifacts
    - name: Download Regression.json file
      run: Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/netperf/sqlite/regression.json" -OutFile "regression.json"
      shell: pwsh
    - name: Download Watermark_Regression.json file
      run: Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/netperf/sqlite/watermark_regression.json" -OutFile "watermark_regression.json"
      shell: pwsh
    - name: Run secnetperf
      shell: pwsh
      timeout-minutes: 20
      run: ./scripts/secnetperf.ps1 `
          -LogProfile ${{ github.event.client_payload.logs || inputs.logprofile || 'NULL' }} `
          -MsQuicCommit ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }} `
          -environment ${{ matrix.env }} `
          -plat ${{env.OS}} `
          -os ${{ matrix.os }} `
          -arch ${{ matrix.arch }} `
          -tls ${{ matrix.tls }} `
          -io ${{ matrix.io }} `
          -filter '${{ github.event.client_payload.filter || inputs.filter || '' }}'
    - name: Upload Test Results JSON
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: json-test-results-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}.json
        path: json-test-results-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}.json
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: logs-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}
        path: artifacts/logs
        if-no-files-found: ignore
    - name: Upload Full Latency Curves
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: latency-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}
        path: latency.txt
        if-no-files-found: ignore

  #
  # Post Processing Jobs
  #
  generate-summary:
    name: Results
    needs: [run-secnetperf, run-secnetperf-1es]
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        path: artifacts/logs
        pattern: json-test-results-*
        merge-multiple: true
    - name: Generate Summary
      shell: pwsh # We never block the workflow if its a git merge or someone manually triggered a run with publish_results = true.
      run: ./.github/workflows/generate-summary.ps1 -BlockOnFailure ${{ github.event.client_payload.pr != '' && !inputs.commit }}

  save-test-results:
    permissions: write-all
    name: Persist Results in DB
    needs: [run-secnetperf]
    if: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.pr == '') || inputs.commit }}
    strategy:
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: sqlite
    - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        pattern: json-test-results-*
    - run: python sql.py --featureint 2
    - run: ls
    - name: Git commit
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git add netperf.sqlite && git add full_latencies && git commit -m "Update DB" && git push'

  update-intermediary-dashboard-json:
    permissions: write-all
    name: Update Dashboard Files
    needs: [save-test-results]
    strategy:
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: deploy
    - run: 'rm -rf *.json'
    - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        pattern: "json-test-results-*"
    - run: python generate_historical_data.py
    - name: Git commit
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git pull && git add *.json && git commit -m "Update intermediary dashboard files" && git push'

  regression-detection:
    permissions: write-all
    name: Update Regression Metrics
    needs: [update-intermediary-dashboard-json]
    strategy:
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: sqlite
    - run: ls
    - run: python regression.py
    - name: Git commit # TODO: Squash history for this branch to keep size small
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git add *.json && git commit -m "Update regression metrics" && git push'
