name: QUIC

on:
  workflow_call:
    inputs:
      ref:
        description: 'MsQuic Branch or Commit'
        required: false
        default: 'main'
        type: string
      filter:
        description: 'Custom Test Filter'
        required: false
        default: ''
        type: string
      logprofile:
        description: 'Logging WPR Profile'
        required: false
        default: "NULL"
        type: string
      commit:
        description: 'Publish Results'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      ref:
        description: 'MsQuic Branch or Commit'
        required: false
        default: 'main'
        type: string
      filter:
        description: 'Custom Test Filter'
        required: false
        default: ''
        type: string
      logprofile:
        description: 'Logging WPR Profile'
        required: false
        default: "NULL"
        type: choice
        options:
          - "NULL"
          - Stacks.Light
          - Stacks.Verbose
          - Basic.Light
          - Basic.Verbose
          - Performance.Light
          - Performance.Verbose
          - RPS.Light
          - RPS.Verbose
          - Datapath.Light
          - Datapath.Verbose
          - Full.Light
          - Full.Verbose
      commit:
        description: 'Publish Results'
        required: false
        default: false
        type: boolean
  pull_request:
    branches:
    - main
    paths:
    - .github/workflows/quic.yml
    - .github/workflows/generate-summary.ps1
    - .github/workflows/quic_matrix.json
    - .github/workflows/manage-azure-vms.ps1
  repository_dispatch:
    types: [run-quic]
      # Args: { guid, sha, ref, pr, logs, filter }

concurrency:
  group: quic-${{ github.event.client_payload.pr || github.event.client_payload.sha || inputs.ref || github.event.pull_request.number || 'main' }}
  cancel-in-progress: true

permissions: write-all
jobs:
  # For automated identification of the workflow.
  name:
    name: For ${{ github.event.client_payload.guid }}
    needs: []
    runs-on: ubuntu-20.04
    steps:
    - name: Print Parameters
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
        echo "Parameters from repository_dispatch:"
        echo "guid: ${{ github.event.client_payload.guid }}"
        echo "sha: ${{ github.event.client_payload.sha }}"
        echo "ref: ${{ github.event.client_payload.ref }}"
        echo "pr: ${{ github.event.client_payload.pr }}"
        echo "logs: ${{ github.event.client_payload.logs }}"
        echo "filter: ${{ github.event.client_payload.filter }}"
    - name: Validate inputs for workflow dispatch
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        if [ "${{ inputs.commit }}" = "true" ] && [ "${{ inputs.ref }}" = "main" ]; then
          echo "Error: If commit is set to true, ref should not be 'main'"
          exit 1
        fi
    - name: Validate inputs for workflow call
      if: ${{ github.event_name == 'workflow_call' }}
      run: |
        if [ "${{ inputs.commit }}" = "true" ] && [ "${{ inputs.ref }}" = "main" ]; then
          echo "Error: If commit is set to true, ref should not be 'main'"
          exit 1
        fi
    - name: Validate inputs for repository dispatch
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
        if [ "${{ github.event.client_payload.ref }}" = "main" ] && [ '${{ github.event.client_payload.pr }}' = '' ]; then
          echo "Repository dispatch on merge events must have ref set to a SHA instead of a branch name."
          exit 1
        fi


  #
  # Build Jobs
  #

  build-windows:
    name: Build WinUser
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
        tls: [schannel] # , openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-win.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-windows-kernel:
    name: Build WinKernel
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
    uses: microsoft/msquic/.github/workflows/build-reuse-winkernel.yml@main
    with:
      os: ${{ matrix.os }}
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-unix:
    name: Build Unix
    needs: []
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'ubuntu-20.04'
            tls: 'openssl'
          - os: 'ubuntu-22.04'
            tls: 'openssl3'
    uses: microsoft/msquic/.github/workflows/build-reuse-unix.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      xdp: ${{ matrix.xdp }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  prepare-matrix:
    name: Prepare lab matrix, and Azure 1ES matrix.
    uses: microsoft/netperf/.github/workflows/prepare-matrix.yml@main
    with:
      matrix_filename: 'quic_matrix.json'
      workflowId: ${{ github.run_id }}

  run-secnetperf-1es:
    name: azure-${{ matrix.role }}-${{ matrix.os }}-${{ matrix.io }}-${{ matrix.tls }}-${{ matrix.arch }}
    needs: [build-unix, build-windows, build-windows-kernel, prepare-matrix]
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.prepare-matrix.outputs.azure-matrix)}}
    runs-on:
    - self-hosted
    - 1ES.Pool=${{ matrix.assigned_pool }}
    steps:
    - name: Lowercase runner.os
      shell: pwsh
      run: echo "OS=$('${{runner.os}}'.ToLower())" >> $env:GITHUB_ENV
    - name: Get WinRM info
      if: ${{ env.OS == 'windows' && matrix.remote_powershell_supported == 'TRUE' }}
      run: Get-Service WinRM
      shell: pwsh

    - name: WinRM quickconfig
      if: ${{ env.OS == 'windows' && matrix.remote_powershell_supported == 'TRUE' }}
      run: echo Y | winrm quickconfig
      shell: pwsh

    - name: Enable remote powershell
      if: ${{ env.OS == 'windows' && matrix.remote_powershell_supported == 'TRUE' }}
      run: Enable-PSRemoting -Force
      shell: pwsh

    - name: Disable Windows Defender / Firewall
      if: ${{ env.OS == 'windows' && matrix.remote_powershell_supported == 'TRUE' }}
      run: |
        # Disable Windows defender / firewall.
        Write-Host "Disabling Windows Defender / Firewall."
        netsh.exe advfirewall set allprofiles state off
        Set-MpPreference -EnableNetworkProtection Disabled
        Set-MpPreference -DisableDatagramProcessing $True
      shell: pwsh

    - name: Enabling ServiceLogonRight
      if: ${{ env.OS == 'windows' && matrix.remote_powershell_supported == 'TRUE' }}
      run: |
        # Make sure the user has the rights to log on.
        function Add-ServiceLogonRight ($Username) {
            $tmp = New-TemporaryFile
            secedit /export /cfg "$tmp.inf" | Out-Null
            (Get-Content -Encoding ascii "$tmp.inf") -replace '^SeServiceLogonRight .+', "`$0,$Username" | Set-Content -Encoding ascii "$tmp.inf"
            secedit /import /cfg "$tmp.inf" /db "$tmp.sdb" | Out-Null
            secedit /configure /db "$tmp.sdb" /cfg "$tmp.inf" | Out-Null
            Remove-Item $tmp* -ErrorAction SilentlyContinue
        }
        Write-Host "Enabling ServiceLogonRight."
        Add-ServiceLogonRight -Username "secnetperf"
      shell: pwsh

    - name: Set local user
      if: ${{ env.OS == 'windows' && matrix.remote_powershell_supported == 'TRUE' }}
      run: |
        Set-LocalUser -Name "secnetperf" -PasswordNeverExpires $true
        whoami
      shell: pwsh

    - name: Checkout microsoft/msquic
      if: ${{ matrix.role == 'client' }}
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/msquic
        ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}
    - name: Checkout netperf
      if: ${{ matrix.role == 'server' && matrix.remote_powershell_supported == 'FALSE'}}
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: main
    - name: Download Artifacts
      uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        name: Release-${{env.OS}}-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-Perf
        path: artifacts
    - name: Download Kernel Artifacts
      uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      if: ${{ matrix.io == 'wsk' }}
      with:
        name: Release-winkernel-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}
        path: artifacts
    - name: (Server) Upload IP address to shared cache
      if: ${{ matrix.role == 'server' }}
      run: |
        if ($isWindows) {
          $ipAddress = (Get-NetIpAddress -AddressFamily IPv4).IpAddress
        } else {
          $ipAddress = ip addr | grep 'inet ' | grep '10' | awk '{print $2}' | cut -d'/' -f1
        }
        $headers = @{
          "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
        }
        Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_ipaddress&value=$ipAddress" -Headers $headers -Method Post
      shell: pwsh

    - name: (Server | yes remote pwsh) Polls for a "done.txt" file from the client
      if: ${{ matrix.role == 'server' && matrix.remote_powershell_supported == 'TRUE' }}
      timeout-minutes: 20
      run: |
        $found = $false
        do {
            $donepath = "C:\done.txt"
            Write-Output "Checking for done.txt..."
            if (Test-Path $donepath) {
              Write-Output "done.txt found"
              $found = $true
              break
            } else {
              Write-Output "done.txt not found"
            }
            $StatePath = "C:\_state"
            if (Test-Path $StatePath) {
              ls $StatePath
              # Fetch all files in the _state directory
              $files = Get-ChildItem -Path $StatePath -File
              # Find the highest lexicographically sorted file name
              $max = 0
              foreach ($file in $files) {
                  $filename = $file.Name.split(".")[0]
                  $num = [int]($filename -replace "[^0-9]", "")
                  if ($num -gt $max) {
                      $max = $num
                  }
              }
              # Check if there is a corresponding "completed" file
              $ExecuteFileExist = Test-Path "$StatePath\execute_$($max).ps1"
              $CompletedFileExist = Test-Path "$StatePath\completed_$($max).txt"
              if ($ExecuteFileExist -and !($CompletedFileExist)) {
                  Write-Host "Executing $StatePath\execute_$($max).ps1"
                  Invoke-Expression "$StatePath\execute_$($max).ps1"
                  Write-Host "Creating $StatePath\completed_$($max).txt"
                  New-Item -ItemType File -Name "completed_$($max).txt" -Path $StatePath
              } else {
                  Write-Host "No outstanding script to execute... Highest order script found so far: $max"
              }
            } else {
              Write-Host "State directory not found"
            }
            Start-Sleep -Seconds 10
        } while (-not $found)
      shell: pwsh
    - name: (Client) Poll for an ip address uploaded by the server, set netperf-peer.
      if: ${{ matrix.role == 'client' }}
      run: |
        $found = $false
        $headers = @{
          "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
        }
        $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_ipaddress"
        do {
          Write-Output "Checking for ip address..."
          try {
            $Response = Invoke-WebRequest -Uri $uri -Headers $headers
            if (!($Response.StatusCode -eq 200)) {
              throw "Failed to get ip address. Status code: $($Response.StatusCode)"
            }
            $ipAddress = $Response.Content
            Write-Output "Ip Address found: $ipAddress"
            if ($isWindows) {
              $serverIp = $ipAddress.Split(" ") | Where-Object { $_.StartsWith("10") } | Select-Object -First 1
            } else {
              $serverIp = $ipAddress
            }
            Write-Output "Server IP: $serverIp"
            $found = $true
          }
          catch {
            Write-Output "Ip Address not found: $_"
            Start-Sleep -Seconds 5
          }
        } while (-not $found)
        Write-Host "Setting netperf-peer"
        if ($isWindows) {
          "$serverIp netperf-peer" | Out-File -Encoding ASCII -Append "$env:SystemRoot\System32\drivers\etc\hosts"
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value 'netperf-peer' -Force
        } else {
          echo "$serverIp netperf-peer" | sudo tee -a /etc/hosts
        }
      shell: pwsh
    - name: (Server | no remote pwsh) Polls for client instructions from remote cache
      if: ${{ matrix.role == 'server' && matrix.remote_powershell_supported == 'FALSE' }}
      timeout-minutes: 20
      run: |
        $found = $false
        $headers = @{
          "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
        }
        $url = "https://netperfapiwebapp.azurewebsites.net"
        $ApprovedCommandsJson = Get-Content -Path "approved-commands.json" -Raw
        do {
          try {
            $Response = Invoke-WebRequest -Uri "$url/getkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_state" -Headers $headers
            $data = $Response.Content
            if ($data -eq "done") {
              $found = $true
              break
            }
            $dataJson = ConvertFrom-Json $data
            if ($dataJson.SeqNum -lt $dataJson.Commands.Count) {
              $command = $dataJson.Commands[$dataJson.SeqNum]
              $dataJson.SeqNum++
              $dataJson = @{
                value=$dataJson
              }
              $body = $dataJson | ConvertTo-Json
              if ($ApprovedCommandsJson.contains($command)) {
                Invoke-WebRequest -Uri "$url/setkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_state" -Headers $headers -Method POST -Body $body -ContentType "application/json"
                $fullPath = "${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl"
                $SecNetPerfPath = "$fullPath/secnetperf"
                $env:LD_LIBRARY_PATH = "${env:LD_LIBRARY_PATH}:$fullPath"
                chmod +x "$SecNetPerfPath"
                if ($command.contains("lowlat")) {
                  ${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl/secnetperf -exec:lowlat -io:epoll -stats:1 | Out-Null
                } else {
                  ${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl/secnetperf -exec:maxtput -io:epoll -stats:1 | Out-Null
                }
              } else {
                Write-Output "Command not approved: $command"
              }
              Write-Host "Data JSON: "
              $dataJson
            } else {
              Start-Sleep -Seconds 10
            }
          }
          catch {
            Write-Output "Client not done yet. Exit reason: $_"
            Start-Sleep -Seconds 30
          }
        } while (-not $found)
      shell: pwsh
    - name: (Client) Download Watermark_Regression.json file
      if: ${{ matrix.role == 'client' }}
      run: Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/netperf/sqlite/watermark_regression.json" -OutFile "watermark_regression.json"
      shell: pwsh
    - name: (Client | yes remote pwsh) Run Secnetperf Script
      if: ${{ matrix.role == 'client' && matrix.remote_powershell_supported == 'TRUE' }}
      shell: pwsh
      timeout-minutes: 20
      run: ./scripts/secnetperf.ps1 `
          -LogProfile ${{ github.event.client_payload.logs || inputs.logprofile || 'NULL' }} `
          -MsQuicCommit ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }} `
          -environment ${{ matrix.env }} `
          -plat ${{env.OS}} `
          -os ${{ matrix.os }} `
          -arch ${{ matrix.arch }} `
          -tls ${{ matrix.tls }} `
          -io ${{ matrix.io }} `
          -filter '${{ github.event.client_payload.filter || inputs.filter || '' }}'
    - name: (Client | yes remote pwsh) Creates a 'done.txt' file to signal the server
      if: ${{ matrix.role == 'client' && matrix.remote_powershell_supported == 'TRUE' }}
      run: |
        $Session = New-PSSession -ComputerName netperf-peer
        Invoke-Command -Session $Session -ScriptBlock {
          New-Item -ItemType File -Name "done.txt" -Path "C:\"
        }
      shell: pwsh
    - name: (Client | no remote pwsh) Run Secnetperf Script
      if: ${{ matrix.role == 'client' && matrix.remote_powershell_supported == 'FALSE' }}
      shell: pwsh
      timeout-minutes: 20
      run: ./scripts/secnetperf.ps1 `
          -LogProfile ${{ github.event.client_payload.logs || inputs.logprofile || 'NULL' }} `
          -MsQuicCommit ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }} `
          -environment ${{ matrix.env }} `
          -plat ${{env.OS}} `
          -os ${{ matrix.os }} `
          -arch ${{ matrix.arch }} `
          -tls ${{ matrix.tls }} `
          -io ${{ matrix.io }} `
          -filter '${{ github.event.client_payload.filter || inputs.filter || '' }}'
          -RemotePowershellSupported 'FALSE'
          -RunId ${{ github.run_id }}_${{ matrix.env_str }}_state
          -SyncerSecret ${{ secrets.NETPERF_SYNCER_SECRET }}
    - name: (Client | no remote pwsh) Uploads ACK to remote cache
      if: ${{ matrix.role == 'client' }}
      run: |
        $headers = @{
          "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
        }
        Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_${{ matrix.env_str }}_state&value=done" -Headers $headers -Method Post
      shell: pwsh
    - name: Upload Test Results JSON
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: json-test-results-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}.json
        path: json-test-results-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}.json
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: logs-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}
        path: artifacts/logs
        if-no-files-found: ignore
    - name: Upload Full Latency Curves
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: latency-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}
        path: latency.txt
        if-no-files-found: ignore


  #
  # Test Jobs.
  # NOTE: tag == env
  #
  run-secnetperf: # This would be 1 enumeration, after CTS has setup the environment with the correct OS type and version.
    name: secnetperf
    needs: [build-unix, build-windows, build-windows-kernel, prepare-matrix]
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.prepare-matrix.outputs.full-matrix)}}
    runs-on:
    - self-hosted
    - ${{ matrix.runner_id || matrix.env }} # Use auto-generated 'runner id' if present, otherwise assign to 'env'.
    - os-${{ matrix.os }}
    - ${{ matrix.arch }}
    steps:
    - name: Checkout microsoft/msquic
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/msquic
        ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}
    - name: Lowercase runner.os
      shell: pwsh
      run: echo "OS=$('${{runner.os}}'.ToLower())" >> $env:GITHUB_ENV
    - name: Download Kernel Drivers
      uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      if: ${{ matrix.io == 'wsk' }}
      with:
        name: Release-winkernel-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}
        path: artifacts
    - name: Download Artifacts
      uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        name: Release-${{env.OS}}-${{ matrix.os == 'windows-2025' && 'windows-2022' || matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-Perf
        path: artifacts
    - name: Download Regression.json file
      run: Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/netperf/sqlite/regression.json" -OutFile "regression.json"
      shell: pwsh
    - name: Download Watermark_Regression.json file
      run: Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/netperf/sqlite/watermark_regression.json" -OutFile "watermark_regression.json"
      shell: pwsh
    - name: Run secnetperf
      shell: pwsh
      timeout-minutes: 20
      run: ./scripts/secnetperf.ps1 `
          -LogProfile ${{ github.event.client_payload.logs || inputs.logprofile || 'NULL' }} `
          -MsQuicCommit ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }} `
          -environment ${{ matrix.env }} `
          -plat ${{env.OS}} `
          -os ${{ matrix.os }} `
          -arch ${{ matrix.arch }} `
          -tls ${{ matrix.tls }} `
          -io ${{ matrix.io }} `
          -filter '${{ github.event.client_payload.filter || inputs.filter || '' }}'
    - name: Upload Test Results JSON
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: json-test-results-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}.json
        path: json-test-results-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}.json
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: logs-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}
        path: artifacts/logs
        if-no-files-found: ignore
    - name: Upload Full Latency Curves
      if: ${{ always() }}
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
      with:
        name: latency-${{ matrix.env }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.tls }}-${{ matrix.io }}
        path: latency.txt
        if-no-files-found: ignore

  cleanup-1es:
    name: Cleanup 1ES Pools Metadata
    needs: [run-secnetperf-1es]
    runs-on: 'windows-latest'
    steps:
    - name: Send cleanup request to endpoint
      run: |
        $headers = @{
          "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
        }
        $url = "https://netperfapiwebapp.azurewebsites.net/cleanuprun?runid=${{ github.run_id }}"
        Invoke-WebRequest -Uri $url -Headers $headers

  #
  # Post Processing Jobs
  #
  generate-summary:
    name: Results
    needs: [run-secnetperf, run-secnetperf-1es]
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        path: artifacts/logs
        pattern: json-test-results-*
        merge-multiple: true
    - name: Generate Summary
      shell: pwsh # We never block the workflow if its a git merge or someone manually triggered a run with publish_results = true.
      run: ./.github/workflows/generate-summary.ps1 -BlockOnFailure ${{ github.event.client_payload.pr != '' && !inputs.commit }}

  save-test-results:
    permissions: write-all
    name: Persist Results in DB
    needs: [run-secnetperf]
    if: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.pr == '') || inputs.commit }}
    strategy:
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: sqlite
    - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        pattern: json-test-results-*
    - run: python sql.py --featureint 2
    - run: ls
    - name: Git commit
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git add netperf.sqlite && git add full_latencies && git commit -m "Update DB" && git push'

  update-intermediary-dashboard-json:
    permissions: write-all
    name: Update Dashboard Files
    needs: [save-test-results]
    strategy:
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: deploy
    - run: 'rm -rf *.json'
    - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
      with:
        pattern: "json-test-results-*"
    - run: python generate_historical_data.py
    - name: Git commit
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git pull && git add *.json && git commit -m "Update intermediary dashboard files" && git push'

  regression-detection:
    permissions: write-all
    name: Update Regression Metrics
    needs: [update-intermediary-dashboard-json]
    strategy:
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: microsoft/netperf
        ref: sqlite
    - run: ls
    - run: python regression.py
    - name: Git commit # TODO: Squash history for this branch to keep size small
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git add *.json && git commit -m "Update regression metrics" && git push'
