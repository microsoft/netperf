name: Observe Lab

on:
  workflow_call:
    inputs:
      lab-matrix:
        description: "Lab jobs to observe"
        required: true
        type: string
      project-callee:
        description: "The callee to dispatch workflows to"
        required: true
        type: string
jobs:
  lab-observer:
    name: Oracle
    runs-on: windows-latest
    steps:
    - name: Observing Lab State...
      run: |
        ############################################################################################################
        # INITIALIZATION LOGIC

        # State transition table:
        # 0_AWAIT_PARENT_CHILD_RESET
        # 1_AWAIT_CALLEE_INITIALIZATION
        # 2_AWAIT_CALLEE_COMPLETION
        # 3_COMPLETED

        ############################################################################################################

        $lab_matrix = ConvertFrom-Json ${{ inputs.lab-matrix }}
        $truth_table = @()
        $num_iterations = 0
        $headers = @{
            "Accept" = "application/vnd.github+json"
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "X-GitHub-Api-Version" = "2022-11-28"
        }

        # Initializing truth table
        while ($truth_table.Count -lt $lab_matrix.Count) {
          $jobs = Get-Jobs -runId ${{ github.run_id }}
          foreach ($job in $jobs) {
            foreach ($todo in $lab_matrix) {
              if ($job.name.Contains($todo.env_str)) {
                if ($job.status -eq "completed" -and $job.conclusion -eq "success") {
                  $truth_table += [PSCustomObject]@{
                    "job" = $job
                    "current_state" = "3_COMPLETED"
                    "conclusion" = "success"
                    "dispatched_workflow_url" = Get-Historical-WorkflowId -job $job
                  }
                } else {
                  $truth_table += [PSCustomObject]@{
                    "job" = $job
                    "current_state" = "0_AWAIT_parent_child_RESET"
                    "conclusion" = ""
                    "dispatched_workflow_url" = ""
                  }
                }
              }
            }
          }
          Write-Host "Initializing truth table... Status: $($truth_table.Count)/$($lab_matrix.Count)"
          Start-Sleep -Seconds 10
        }

        ############################################################################################################
        # MAIN OBSERVER LOOP
        ############################################################################################################

        while (NotDoneYet) {
          $num_iterations++
          try {
            foreach ($row in $truth_table) {
              switch ($row.current_state) {
                "0_AWAIT_PARENT_CHILD_RESET" {
                  $assigned_runner = Get-Assigned-Runner -job $row.job
                  if ($assigned_runner) {
                    DispatchCallee -job $row.job -assigned_runner $assigned_runner
                    $row.current_state = "1_AWAIT_CALLEE_INITIALIZATION"
                  }
                }
                "1_AWAIT_CALLEE_INITIALIZATION" {
                  $callee_workflow_url = Get-DispatchedTestRunWorkflowUrl -job $row.job
                  if ($callee_workflow_url) {
                    $row.dispatched_workflow_url = $callee_workflow_url
                    $row.current_state = "2_AWAIT_CALLEE_COMPLETION"
                  }
                }
                "2_AWAIT_CALLEE_COMPLETION" {
                  $callee_status = Get-Run -runId $row.dispatched_workflow_url
                  if ($callee_status.status -eq "completed") {
                    $row.current_state = "3_COMPLETED"
                    $row.conclusion = $callee_status.conclusion
                  }
                }
                "3_COMPLETED" {
                  # Do nothing
                }
              }
            }
            # Update truth table in shared cache
            $key = "${{ github.run_id }}_${{ github.run_attempt }}_truth_table"
            $value = $truth_table | ConvertTo-Json
            $api = "https://netperfapi.azurewebsites.net/setkeyvalue?key=$key&value=$value"
            Invoke-WebRequest -Uri $api -Headers $headers -Method Post
            DisplayTruthTable
            Start-Sleep -Seconds 20
          } catch {
            Write-Host "Observer loop error: $_"
          }
        }

        ############################################################################################################
        # FUNCTION DEFINITIONS
        ############################################################################################################

        function Get-Historical-WorkflowId {
          param([PSCustomObject]$job)
          foreach ($step in $job.steps) {
            if ($step.name.Contains("Wait-Callee")) {
              $id = $step.name.Split("_")[1]
              return "https://api.github.com/repos/microsoft/netperf/actions/runs/$id"
            }
          }
          Write-Host "Failed to get historical workflow ID for a job that should have succeeded."
          exit 1
        }

        function NotDoneYet {
          $fail_observer = $false
          foreach ($row in $truth_table) {
            if ($row.current_state -ne "3_COMPLETED") {
              return $true
            }
            if ($row.conclusion -neq "success") {
              $fail_observer = $true
            }
          }

          if ($fail_observer) {
            Write-Host "Some jobs failed. Exiting observer loop."
            exit 1
          }

          return $false
        }

        function DispatchCallee {
          param (
            [PSCustomObject]$job,
            [string]$assigned_runner
          )
          $url = "https://api.github.com/repos/microsoft/netperf/dispatches"
          $unique_env_str = "${{ github.run_id }}_${{ github.run_attempt }}_" + $job.env_str
          Write-Host "Dispatching with assigned runner: $assigned_runner"
          $body = @{
            event_type = "${{ inputs.project_callee }}"
            client_payload = @{
              assigned_runner = "$assigned_runner"
              unique_env_str = "$unique_env_str"
              os = "$job.os"
              io = "$job.io"
              tls = "$job.tls"
              arch = "$job.arch"
            }
          } | ConvertTo-Json
          try {
            Invoke-WebRequest -Uri $url -Headers $headers -Method Post -Body $body
          } catch {
            Write-Host "Failed to dispatch callee: $_"
            exit 1
          }
        }

        function Get-DispatchedTestRunWorkflowUrl {
          param([PSCustomObject]$job)
          $key = "${{ github.run_id }}_${{ github.run_attempt }}_" + $job.env_str + "_vm_online"
          $url = "https://netperfapi.azurewebsites.net/getkeyvalue?key=$key"
          try {
            $response = Invoke-WebRequest -Uri $url -Headers $headers -Method Get
            return $response.Content
          } catch {
            Write-Host "Failed to get dispatched test run workflow URL: $_"
            return $null
          }
        }

        function DisplayTruthTable {
          foreach ($row in $truth_table) {
            Write-Host "Job: $($row.job.name)"
            Write-Host "Current State: $($row.current_state)"
            Write-Host "Conclusion: $($row.conclusion)"
            Write-Host "Dispatched Workflow URL: $($row.dispatched_workflow_url)"
            Write-Host "---------------------------------"
          }
        }

        function Get-Assigned-Runner {
          param([PSCustomObject]$job)

          $parent_key = "${{ github.run_id }}_${{ github.run_attempt }}_" + $job.env_str + "_parent_reset_done"
          $child_key = "${{ github.run_id }}_${{ github.run_attempt }}_" + $job.env_str + "_child_reset_done"
          $parent_url = "https://netperfapi.azurewebsites.net/getkeyvalue?key=$parent_key"
          $child_url = "https://netperfapi.azurewebsites.net/getkeyvalue?key=$child_key"
          try {
            $parent_response = Invoke-WebRequest -Uri $parent_url -Headers $headers -Method Get
            $child_response = Invoke-WebRequest -Uri $child_url -Headers $headers -Method Get
            if ($parent_response.status -neq "success" -or $child_response.status -neq "success") {
              throw "parent or child not ready"
            }
            $parent_id = $parent_response.Content
            $child_id = $child_response.Content
            return "$parent_id,$child_id"
          } catch {
            Write-Host "Failed to get assigned runner: $_"
            return $null
          }
        }

        function Get-Jobs {
            param([string]$runId)
            $url = "https://api.github.com/repos/microsoft/netperf/actions/runs/$runId/jobs"
            Write-Debug "GET $url"
            return ((Invoke-WebRequest -Uri $url -Method GET -Headers $headers).Content | ConvertFrom-Json).jobs
        }

      shell: pwsh
