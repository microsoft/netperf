name: Custom Tasks

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Windows OS Version'
        required: false
        default: "2022"
        type: choice
        options:
          - "2025"
          - "2022"
          - "2019"

permissions: write-all

jobs:
  testjob:
    needs: []
    strategy:
      matrix:
        role: ["client", "server"]
    runs-on: [self-hosted, 1ES.Pool=netperf-aztestpool]
    steps:
      - name: Print Role
        run: Write-Host "Role; ${{ matrix.role }}"
        shell: pwsh

      - name: Print networking information
        run: Get-NetIpAddress -AddressFamily IPv4
        shell: pwsh

      - name: Get WinRM info
        run: Get-Service WinRM
        shell: pwsh

      - name: WinRM quickconfig
        run: echo Y | winrm quickconfig
        shell: pwsh

      - name: Enable remote powershell
        run: Enable-PSRemoting -Force
        shell: pwsh

      - name: Who Am I?
        run: whoami
        shell: pwsh

      - name: Disable Windows Defender / Firewall
        run: |
          # Disable Windows defender / firewall.
          Write-Host "Disabling Windows Defender / Firewall."
          netsh.exe advfirewall set allprofiles state off
          Set-MpPreference -EnableNetworkProtection Disabled
          Set-MpPreference -DisableDatagramProcessing $True
        shell: pwsh

      - name: Try starting a remote powershell session to itself
        run: New-PSSession
        shell: pwsh

      - name: (Server) Upload IP address to shared cache
        if: ${{ matrix.role == 'server' }}
        run: |
          $ipAddress = (Get-NetIpAddress -AddressFamily IPv4).IpAddress
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ipaddress&value=$ipAddress" -Headers $headers
        shell: pwsh


      - name: (Server) Start Secnetperf server and polls for an ACK.
        if: ${{ matrix.role == 'server' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ack"
          do {
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ACK. Status code: $($Response.StatusCode)"
              }
              $ack = $Response.Content
              Write-Output "ACK found: $ack"
              $found = $true
            }
            catch {
              Write-Output "Client not done testing yet. Waiting for ACK..."
              # We can poll for config here
              Start-Sleep -Seconds 30
            }
          } while (-not $found)
        shell: pwsh

      - name: (Client) Poll for an ip address uploaded by the server
        if: ${{ matrix.role == 'client' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ipaddress"
          do {
            Write-Output "Checking for ip address..."
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ip address. Status code: $($Response.StatusCode)"
              }
              $ipAddress = $Response.Content
              Write-Output "Ip Address found: $ipAddress"
              $serverIp = $ipAddress.Split(" ") | Where-Object { $_.StartsWith("10") } | Select-Object -First 1
              Write-Output "Server IP: $serverIp"
              $found = $true
            }
            catch {
              Write-Output "Ip Address not found: $_"
              Start-Sleep -Seconds 5
            }
          } while (-not $found)

          Write-Host "Preparing to run enable remote powershell session"
          "$serverIp netperf-peer" | Out-File -Encoding ASCII -Append "$env:SystemRoot\System32\drivers\etc\hosts"
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value 'netperf-peer' -Force
          # Wait
          Start-Sleep -Seconds 5
          Write-Host "$(Get-Date) Try starting a remote session"
          Write-Host "Print powershell version information: "
          pwsh --version
          $username = "secnetperf"
          $password = {{ secrets.VM_PASSWORD }} | ConvertTo-SecureString -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($username, $password)
          $Session = New-PSSession -ComputerName netperf-peer -Credential $cred -ConfigurationName PowerShell.7
          $session
        shell: pwsh

      - name: (Client) Upload ACK to shared cache
        if: ${{ matrix.role == 'client' }}
        run: |
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ack&value=ack" -Headers $headers
        shell: pwsh

      # - name: (Server) Server polls for an ACK so it can clean up
      #   if: ${{ matrix.role == 'server' }}
      #   run: |
      #     $found = $false
      #     $headers = @{
      #       "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
      #     }
      #     $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ack"
      #     do {
      #       Write-Output "Checking for ACK..."
      #       try {
      #         $Response = Invoke-WebRequest -Uri $uri -Headers $headers
      #         if (!($Response.StatusCode -eq 200)) {
      #           throw "Failed to get ACK. Status code: $($Response.StatusCode)"
      #         }
      #         $ack = $Response.Content
      #         Write-Output "ACK found: $ack"
      #         $found = $true
      #       }
      #       catch {
      #         Write-Output "ACK not found: $_"
      #         Start-Sleep -Seconds 30
      #       }
      #     } while (-not $found)
      #   shell: pwsh
