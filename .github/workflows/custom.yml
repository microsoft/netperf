name: Custom Tasks

on:
  workflow_dispatch:

permissions: read-all

jobs:
  enable-logs: # This would be 1 enumeration, after CTS has setup the environment with the correct OS type and version.
    name: Enable Logs
    runs-on:
    - self-hosted
    - "x64"
    - "secnetperf"
    - "windows"
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
    - name: Capture Logs
      shell: pwsh
      run: |
        Write-Host 'Connecting to netperf-peer'
        $Session = New-PSSession -ComputerName "netperf-peer" -ConfigurationName PowerShell.7

        Write-Host 'Killing any previous secnetperf'
        Invoke-Command -Session $Session -ScriptBlock {
            Get-Process | Where-Object { $_.Name -eq "secnetperf" } | Stop-Process
        }

        Write-Host 'Copying log scripts to peer'
        Copy-Item -ToSession $Session -Path .\.github\workflows\start_ngc_tracing_public.cmd -Destination C:\_work\quic\scripts
        Copy-Item -ToSession $Session -Path .\.github\workflows\stop_ngc_tracing_public.cmd -Destination C:\_work\quic\scripts

        Write-Host 'Starting logs'
        #Invoke-Command -Session $Session -ScriptBlock {
        #    try { C:\_work\quic\scripts\start_ngc_tracing_public.cmd } catch { }
        #}

        Write-Host 'Starting secnetperf'
        $Job = Invoke-Command -Session $Session -ScriptBlock {
            C:\_work\quic\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe
        } -AsJob
        Start-Sleep 1
        Stop-Job -Job $Job
        #$RemoteResult = Receive-Job -Job $Job
        #Write-Host ($RemoteResult -join "`n")

        Write-Host 'Killing secnetperf (if running) and stopping logs'
        Invoke-Command -Session $Session -ScriptBlock {
            Get-Process | Where-Object { $_.Name -eq "secnetperf" } | Stop-Process
            try { C:\_work\quic\scripts\stop_ngc_tracing_public.cmd 2>&1 } catch { }
            #dir C:\_work\quic\dpapi
        }

        Write-Host 'Setting up log folder'
        Remove-Item .\artifacts\dpapi -Force -Recurse -ErrorAction Ignore | Out-Null
        mkdir .\artifacts\dpapi | Out-Null

        Write-Host 'Copying out log files'
        Copy-Item -FromSession $Session C:\_work\quic\dpapi .\artifacts\dpapi -Recurse

        Write-Host 'Deleting log files from remote'
        Invoke-Command -Session $Session -ScriptBlock {
            del C:\_work\quic\dpapi -Force -Recurse -ErrorAction Ignore | Out-Null
        }
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: artifacts/dpapi
