name: Custom Tasks

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Windows OS Version'
        required: false
        default: "2022"
        type: choice
        options:
          - "2025"
          - "2022"
          - "2019"

permissions: write-all

jobs:
  build-windows:
    name: Build WinUser
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
        tls: [schannel] # , openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-win.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  testjob:
    needs: [build-windows]
    strategy:
      matrix:
        role: ["client", "server"]
    runs-on: [self-hosted, 1ES.Pool=netperf-aztestpool]
    steps:
      - name: Print Role
        run: Write-Host "Role; ${{ matrix.role }}"
        shell: pwsh

      - name: Print networking information
        run: Get-NetIpAddress -AddressFamily IPv4
        shell: pwsh

      - name: Get WinRM info
        run: Get-Service WinRM
        shell: pwsh

      - name: WinRM quickconfig
        run: echo Y | winrm quickconfig
        shell: pwsh

      - name: Enable remote powershell
        run: Enable-PSRemoting -Force
        shell: pwsh

      - name: Who Am I?
        run: whoami
        shell: pwsh

      - name: Check registry is setup
        run: |
          $username = (Get-ItemProperty 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon').DefaultUserName
          Write-Host "REG ADDED Username: $username"
        shell: pwsh

      - name: Add some reg stuff
        run:
          |
          REG ADD 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' /v AutoAdminLogon /t REG_SZ /d 1 /f
          REG ADD 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' /v DefaultUserName /t REG_SZ /d secnetperf /f
          REG ADD 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' /v DefaultPassword /t REG_SZ /d ${{ secrets.VM_PASSWORD }} /f

      - name: Check registry is setup
        run: |
          $username = (Get-ItemProperty 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon').DefaultUserName
          Write-Host "REG ADDED Username: $username"
        shell: pwsh

      - name: Print local users
        run: Get-LocalUser
        shell: pwsh

      - name: Download Artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
        with:
          name: Release-windows-windows-2022-x64-schannel-Perf
          path: artifacts

      - name: Create temporary script
        run: |
          pwd
          $script = @"
          Write-Host "About to start server"
          iex "C:\vss-agent\2.316.1\_work\netperf\netperf\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe -exec:maxtput"
          "@
          $script | Out-File -FilePath C:\vss-agent\2.316.1\_work\netperf\netperf\start-server.ps1 -Encoding ASCII
        shell: pwsh

      - name: Disable Windows Defender / Firewall
        run: |
          # Disable Windows defender / firewall.
          Write-Host "Disabling Windows Defender / Firewall."
          netsh.exe advfirewall set allprofiles state off
          Set-MpPreference -EnableNetworkProtection Disabled
          Set-MpPreference -DisableDatagramProcessing $True
        shell: pwsh

      - name: Enabling ServiceLogonRight
        run: |
          # Make sure the user has the rights to log on.
          function Add-ServiceLogonRight ($Username) {
              $tmp = New-TemporaryFile
              secedit /export /cfg "$tmp.inf" | Out-Null
              (Get-Content -Encoding ascii "$tmp.inf") -replace '^SeServiceLogonRight .+', "`$0,$Username" | Set-Content -Encoding ascii "$tmp.inf"
              secedit /import /cfg "$tmp.inf" /db "$tmp.sdb" | Out-Null
              secedit /configure /db "$tmp.sdb" /cfg "$tmp.inf" | Out-Null
              Remove-Item $tmp* -ErrorAction SilentlyContinue
          }
          Write-Host "Enabling ServiceLogonRight."
          Add-ServiceLogonRight -Username "secnetperf"
        shell: pwsh

      - name: Set local user
        run: Set-LocalUser -Name "secnetperf" -PasswordNeverExpires $true
        shell: pwsh

      - name: (Server) Upload IP address to shared cache
        if: ${{ matrix.role == 'server' }}
        run: |
          $ipAddress = (Get-NetIpAddress -AddressFamily IPv4).IpAddress
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ipaddress&value=$ipAddress" -Headers $headers
        shell: pwsh


      - name: (Server) Polls for an ACK from the client
        if: ${{ matrix.role == 'server' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ack"
          do {
            try {
              ls C:\
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ACK. Status code: $($Response.StatusCode)"
              }
              $ack = $Response.Content
              Write-Output "ACK found: $ack"
              $found = $true
            }
            catch {
              Write-Output "Client not done testing yet. Waiting for ACK..."
              # We can poll for config here
              Start-Sleep -Seconds 30
            }
          } while (-not $found)
        shell: pwsh

      - name: (Client) Poll for an ip address uploaded by the server, set netperf-peer.
        if: ${{ matrix.role == 'client' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ipaddress"
          do {
            Write-Output "Checking for ip address..."
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ip address. Status code: $($Response.StatusCode)"
              }
              $ipAddress = $Response.Content
              Write-Output "Ip Address found: $ipAddress"
              $serverIp = $ipAddress.Split(" ") | Where-Object { $_.StartsWith("10") } | Select-Object -First 1
              Write-Output "Server IP: $serverIp"
              $found = $true
            }
            catch {
              Write-Output "Ip Address not found: $_"
              Start-Sleep -Seconds 5
            }
          } while (-not $found)

          Write-Host "Preparing to run enable remote powershell session"
          "$serverIp netperf-peer" | Out-File -Encoding ASCII -Append "$env:SystemRoot\System32\drivers\etc\hosts"
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value 'netperf-peer' -Force
          Write-Host "$(Get-Date) Try starting a remote session"
          Write-Host "Print powershell version information: "
          pwsh --version
          $Session = New-PSSession -ComputerName netperf-peer
          $Session
          Write-Host "Using remote powershell session to start Secnetperf"
          Invoke-Command -Session $Session -ScriptBlock {
            New-Item -ItemType File -Name "Sanity-check.txt" -Path "C:\"
          }
        shell: pwsh

      - name: Checkout microsoft/msquic
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          repository: microsoft/msquic
          ref: '82f554c0b62135f9a200280dd8c0365032cd8835'

      - name: (Client) Run Secnetperf Script
        if: ${{ matrix.role == 'client' }}
        shell: pwsh
        timeout-minutes: 20
        run: ./scripts/secnetperf.ps1 `
            -LogProfile 'NULL' `
            -MsQuicCommit 'TODO' `
            -environment 'azure' `
            -plat 'windows' `
            -os 'windows-2022' `
            -arch 'x64' `
            -tls 'schannel' `
            -io 'iocp' `
            -filter ''

      - name: (Client) Upload ACK to shared cache
        if: ${{ matrix.role == 'client' }}
        run: |
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ack&value=ack" -Headers $headers
        shell: pwsh
