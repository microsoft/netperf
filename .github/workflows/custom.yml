name: Custom Tasks

on:
  workflow_dispatch:

permissions: read-all

jobs:
  enable-logs:
    name: Enable Logs
    runs-on:
    - self-hosted
    - "x64"
    - "secnetperf"
    - "windows"
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
    - name: Capture Logs
      shell: pwsh
      run: |
        Write-Host 'Connecting to netperf-peer'
        $Session = New-PSSession -ComputerName "netperf-peer" -ConfigurationName PowerShell.7

        Write-Host 'Killing any previous secnetperf'
        Invoke-Command -Session $Session -ScriptBlock {
            Get-Process | Where-Object { $_.Name -eq "secnetperf" } | Stop-Process
        }

        Write-Host 'Copying log scripts to peer'
        Copy-Item -ToSession $Session -Path .\.github\workflows\start_ngc_tracing_public.cmd -Destination C:\_work\quic\scripts
        Copy-Item -ToSession $Session -Path .\.github\workflows\stop_ngc_tracing_public.cmd -Destination C:\_work\quic\scripts

        Write-Host 'Starting logs'
        Invoke-Command -Session $Session -ScriptBlock {
            try { C:\_work\quic\scripts\start_ngc_tracing_public.cmd 2>&1 } catch { }
            try { logman start dpapi_trace -p "{89fe8f40-cdce-464e-8217-15ef97d4c7c3}" 0xffffffff -o C:\_work\quic\dpapi\dpapi.etl -ets -ln dpapi } catch { }
        }

        function Wait-ForRemote {
          param ($Job)
          # Ping sidechannel socket on 9999 to tell the app to die
          $Socket = New-Object System.Net.Sockets.UDPClient
          $BytesToSend = @(
              0x57, 0xe6, 0x15, 0xff, 0x26, 0x4f, 0x0e, 0x57,
              0x88, 0xab, 0x07, 0x96, 0xb2, 0x58, 0xd1, 0x1c
          )
          for ($i = 0; $i -lt 5; $i++) {
              $Socket.Send($BytesToSend, $BytesToSend.Length, "netperf-peer", 9999) | Out-Null
              $Completed = Wait-Job -Job $Job -Timeout 1
              if ($null -ne $Completed) {
                  break;
              }
          }

          Stop-Job -Job $Job | Out-Null
          $RetVal = Receive-Job -Job $Job -ErrorAction "Stop"
          return $RetVal -join "`n"
        }

        Write-Host 'Starting secnetperf'
        $Job = Invoke-Command -Session $Session -ScriptBlock {
            C:\_work\quic\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe
        } -AsJob
        Start-Sleep 1
        try {
            $RemoteResult = Wait-ForRemote $Job
            Write-Host $RemoteResult
        } catch { }

        Write-Host 'Stopping logs'
        Invoke-Command -Session $Session -ScriptBlock {
            Get-Process | Where-Object { $_.Name -eq "secnetperf" } | Stop-Process
            try { logman stop dpapi_trace -ets } catch { }
            try { C:\_work\quic\scripts\stop_ngc_tracing_public.cmd 2>&1 } catch { }
        }

        Write-Host 'Copying out log files'
        Remove-Item .\artifacts\dpapi -Force -Recurse -ErrorAction Ignore | Out-Null
        Copy-Item -FromSession $Session C:\_work\quic\dpapi .\artifacts\dpapi -Recurse
        dir .\artifacts\dpapi

        Write-Host 'Deleting log files from remote'
        Invoke-Command -Session $Session -ScriptBlock {
            del C:\_work\quic\dpapi -Force -Recurse -ErrorAction Ignore | Out-Null
        }
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: artifacts/dpapi
