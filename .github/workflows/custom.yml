name: Custom Tasks

on:
  workflow_dispatch:

permissions: write-all

jobs:
  call-callee:
    name: Call Callee
    runs-on: windows-latest
    steps:
      - name: Call Callee
        run: |
          $headers = @{
            "Accept" = "application/vnd.github+json"
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "X-GitHub-Api-Version" = "2022-11-28"
          }
          $url = "https://api.github.com/repos/microsoft/netperf/dispatches"
          $body = @{
            event_type = "lab-quic-callee"
            client_payload = @{
              parent_id = "69"
              child_id = "420"
              env_str = "hello-world"
              os = "windows"
              io = "xdp"
            }
          } | ConvertTo-Json
          Write-Debug "POST $url"
          Write-Debug "BODY $body"
          Invoke-WebRequest -Uri $url -Method POST -Headers $headers -Body $body

          function Get-Runs {
              $url = "https://api.github.com/repos/microsoft/netperf/actions/runs?event=repository_dispatch"
              Write-Debug "GET $url"
              return ((Invoke-WebRequest -Uri $url -Method GET -Headers $headers).Content | ConvertFrom-Json).workflow_runs
          }

          function Get-Jobs {
              param([string]$runId)
              $url = "https://api.github.com/repos/microsoft/netperf/actions/runs/$runId/jobs"
              Write-Debug "GET $url"
              return ((Invoke-WebRequest -Uri $url -Method GET -Headers $headers).Content | ConvertFrom-Json).jobs
          }

          function Get-RunId {
              for ($i = 0; $i -lt 10; $i++) { # Try up to 10 times
                  $workflows = Get-Runs
                  foreach ($workflow in $workflows) {
                      if ($workflow.name -ne "lab-quic-callee") {
                          $name = $workflow.name
                          Write-Host "Skipping run $name"
                          continue
                      }
                      $jobs = Get-Jobs $workflow.id
                      foreach ($job in $jobs) {
                          if ($job.name.Contains("hello-world")) {
                              return $workflow.id
                          }
                      }
                  }
                  Write-Host "Run not found, retrying in 1 second..."
                  Start-Sleep -Seconds 1
              }
              Write-Error "Run not found!"
              return $null
          }

          $runId = Get-RunId
