# Copyright (c) Microsoft Corporation
name: NetworkLayer-Performance

on:
  # Permit manual runs of the workflow.
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or Commit'
        required: false
        default: 'ge_current_directiof_stack'
        type: string
      profile:
        description: 'Capture CPU profile'
        required: false
        default: false
        type: boolean
      tcp_ip_tracing:
        description: 'Capture TCP/IP tracing'
        required: false
        default: false
        type: boolean

  pull_request:
    branches:
    - user/vinodko/NlPerf
    paths:
    - .github/workflows/NetworkLayer_Perf.yml

  repository_dispatch:
    types: [run-nlperf]
      # Args: { guid, sha, ref, pr }


concurrency:
  group: ebpf-${{ github.event.client_payload.pr || github.event.client_payload.sha || inputs.ref || github.event.pull_request.number || 'main' }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write # Required by codeql task

jobs:
  # For automated identification of the workflow.
  name:
    name: For ${{ github.event.client_payload.guid }}
    if: ${{ github.event_name == 'repository_dispatch' }}
    needs: []
    runs-on: ubuntu-20.04
    steps:
    - run: |
        echo "guid: ${{ github.event.client_payload.guid }}"
        echo "sha: ${{ github.event.client_payload.sha }}"
        echo "ref: ${{ github.event.client_payload.ref }}"
        echo "pr: ${{ github.event.client_payload.pr }}"

  build_cts_traffic:
    name: Build cts-traffic test tool
    uses: microsoft/ctsTraffic/.github/workflows/reusable-build.yml@master
    with:
      build_artifact: cts-traffic
      repository: 'microsoft/ctsTraffic'
      configurations: '["Release"]'
      ref: 'master'

  test:
    name: Test Windows Network Layer Performance
    needs: [build_cts_traffic]
    strategy:
      fail-fast: false
      matrix:
        vec: [
          { env: "lab",   os: "2025", arch: "x64" },
        ]
    runs-on:
    - RCU
 
    steps:
    - name: Setup workspace
      run: |
        Get-ChildItem  | % { Remove-Item -Recurse $_ }
        if (Test-Path ${{ github.workspace }}\cts-traffic) { Remove-Item -Recurse -Force ${{ github.workspace }}\cts-traffic }
        if (Test-Path ${{ github.workspace }}\nl_perf) { Remove-Item -Recurse -Force ${{ github.workspace }}\nl_perf }
        New-item -ItemType Directory -Path ${{ github.workspace }}\nl_perf
        New-item -ItemType Directory -Path ${{ github.workspace }}\cts-traffic
        
    - name: Log System information
      run: |
        Get-WmiObject -Class Win32_Processor | Select-Object -Property Name,NumberOfCores,NumberOfLogicalProcessors
        Get-WmiObject -Class Win32_ComputerSystem | Select-Object -Property Manufacturer,Model,TotalPhysicalMemory
        Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property Caption,Version,OSArchitecture

    # Install the latest anti-malware signatures for Windows Defender to prevent false positives.
    # Windows Defender incorrectly flags some of the test binaries as malware.
    - name: Download latest anti-malware signatures for Windows Defender
      run: |
        Update-MpSignature -Verbose
        Start-MpScan -ScanType QuickScan
        Add-MpPreference -ExclusionPath ${{ github.workspace }}

    - name: Download GH CLI if not installed
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if (-not (Test-Path -Path "C:\Program Files\GitHub CLI\gh.exe")) {
        $url = "https://github.com/cli/cli/releases/download/v2.48.0/gh_2.48.0_windows_amd64.msi"
        Invoke-WebRequest -Uri $url -OutFile "gh.msi"
        Start-Process -FilePath "msiexec" -ArgumentList "/i gh.msi /quiet /qn /norestart /log install.log" -Wait -NoNewWindow
        }
        echo "C:\Program Files\GitHub CLI" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Download cts-traffic
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: "cts-traffic Release"
        path: ${{ github.workspace }}\cts-traffic
  
    - name: Start TCPIP tracing - Baseline
        if: ${{ github.event.inputs.tcp_ip_tracing }}
        run: |
          wpr -cancel 2>$null; $global:LASTEXITCODE = 0
          if (Test-Path "tcpip.wprp") { Remove-Item -Force "tcpip.wprp" }
          Invoke-WebRequest -uri "https://raw.githubusercontent.com/microsoft/netperf/main/.github/workflows/tcpip.wprp" -OutFile "tcpip.wprp"
          wpr -start tcpip.wprp -filemode

    # Run CTS traffic to establish a baseline.
    - name: Run CTS cts-traffic baseline
      working-directory: ${{ github.workspace }}\cts-traffic
      # Note: The script is not in the repository, but is downloaded from the web.
      run: |
        dir .
        $profile = 0
        $peerName = "WIN-4OUAF4010S4.guest.corp.microsoft.com"
        if ("${{inputs.profile}}" -eq "true") { $profile = 1 }
        $url = "https://raw.githubusercontent.com/microsoft/bpf_performance/main/scripts/two-machine-perf.ps1"
        iex "& { $(irm $url) } -CpuProfile $profile -peerName $peerName"
        if ($Profile) { Move-Item -Path ${{ github.workspace }}\cts-traffic\cts_traffic_send.etl -NewName "${{ github.workspace }}\etl\cts_traffic_send_baseline.etl"}
        if ($Profile) { Rename-Item -Path ${{ github.workspace }}\cts-traffic\cts_traffic_recv.etl -NewName "${{ github.workspace }}\etl\cts_traffic_recv_baseline.etl" }
        dir ${{ github.workspace }}\etl

    - name: Stop TCPIP tracing - Baseline
      if: ${{ github.event.inputs.tcp_ip_tracing }}
      run: |
        wpr -stop ${{ github.workspace }}\ETL\tcpip_baseline.etl
        # The resulting CSV file's header is updated to match the format produced by the BPF performance tests.


    # The "Average Duration (ns)" column is the metric of interest.
    - name: Fixup cts traffic results baseline
      working-directory: ${{ github.workspace }}\cts-traffic
      run: |
        $content = Get-Content ctsTrafficResults.csv
        $content[0] = "Timestamp,Test,Average Duration (ns)"
        $content | Set-Content ctsTrafficResults.csv
        Copy-Item ctsTrafficResults.csv ctsTrafficResults_baseline.csv

    - name: Upload CTS cts-traffic results baseline
      if: always()
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: cts_traffic_baseline_${{ matrix.vec.env }}_${{ matrix.vec.os }}_${{ matrix.vec.arch }}
        path: ${{ github.workspace }}\cts-traffic\ctsTrafficResults.csv
        
    - name: Upload CPU profile
        if: ${{ inputs.profile == true }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: CPU_Profile_${{ matrix.vec.env }}_${{ matrix.vec.os }}_${{ matrix.vec.arch }}
          path: ETL

    - name: Upload TCPIP ETL
      if: ${{ inputs.tcp_ip_tracing == true }}
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: TCPIP_${{ matrix.vec.env }}_${{ matrix.vec.os }}_${{ matrix.vec.arch }}
        path: ${{ github.workspace }}\ETL

    - name: Cleanup workspace
      if: always()
      run: |
        if (Test-Path ${{ github.workspace }}\cts-traffic) { Remove-Item -Recurse -Force ${{ github.workspace }}\cts-traffic }
        if (Test-Path ${{ github.workspace }}\nl_perf) { Remove-Item -Recurse -Force ${{ github.workspace }}\nl_perf }
        if (Test-Path ${{ github.workspace }}\ETL) { Remove-Item -Recurse -Force ${{ github.workspace }}\ETL }

    - name: Restore Windows Defender exclusions
      if: always()
      run: |
        Remove-MpPreference -ExclusionPath ${{ github.workspace }}
        Update-MpSignature -Verbose
        Start-MpScan -ScanType QuickScan

