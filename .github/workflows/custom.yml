name: Custom Tasks

on:
  workflow_dispatch:

permissions: read-all

jobs:
  enable-logs:
    name: Enable Logs
    runs-on:
    - self-hosted
    - "x64"
    - "secnetperf"
    - "windows"
    steps:
    #- name: Checkout repository
    #  uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
    - name: Capture Logs
      shell: pwsh
      run: |
        Write-Host 'Connecting to netperf-peer'
        $Session = New-PSSession -ComputerName "netperf-peer" -ConfigurationName PowerShell.7

        Write-Host 'Remotely logging in user secnetperf'
        mstsc /v:netperf-peer /admin /u:secnetperf /p:${{ secrets.NETPERF_MACHINE_PW }}

        function Wait-ForRemote {
          param ($Job)
          # Ping sidechannel socket on 9999 to tell the app to die
          $Socket = New-Object System.Net.Sockets.UDPClient
          $BytesToSend = @(
              0x57, 0xe6, 0x15, 0xff, 0x26, 0x4f, 0x0e, 0x57,
              0x88, 0xab, 0x07, 0x96, 0xb2, 0x58, 0xd1, 0x1c
          )
          for ($i = 0; $i -lt 5; $i++) {
              $Socket.Send($BytesToSend, $BytesToSend.Length, "netperf-peer", 9999) | Out-Null
              $Completed = Wait-Job -Job $Job -Timeout 1
              if ($null -ne $Completed) {
                  break;
              }
          }

          Stop-Job -Job $Job | Out-Null
          $RetVal = Receive-Job -Job $Job -ErrorAction "Stop"
          return $RetVal -join "`n"
        }

        Write-Host '=== Running secnetperf ==='
        $Job = Invoke-Command -Session $Session -ScriptBlock {
            C:\_work\quic\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe
        } -AsJob
        Start-Sleep 1
        try {
            $RemoteResult = Wait-ForRemote $Job
            Write-Host $RemoteResult
        } catch { }
