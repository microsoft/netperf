name: Custom Tasks

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Windows OS Version'
        required: false
        default: "2022"
        type: choice
        options:
          - "2025"
          - "2022"
          - "2019"

permissions: write-all

jobs:
  build-windows:
    name: Build WinUser
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
        tls: [schannel] # , openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-win.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}


  testjob:
    needs: [build-windows]
    strategy:
      matrix:
        role: ["client", "server"]
    runs-on: [self-hosted, 1ES.Pool=netperf-aztestpool]
    steps:
      - name: Print Role
        run: Write-Host "Role; ${{ matrix.role }}"
        shell: pwsh

      - name: Print networking information
        run: Get-NetIpAddress -AddressFamily IPv4
        shell: pwsh

      - name: Download Artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
        with:
          name: Release-windows-windows-2022-x64-schannel-Perf
          path: artifacts

      - name: Disable Windows Defender / Firewall
        run: |
          # Disable Windows defender / firewall.
          Write-Host "Disabling Windows Defender / Firewall."
          netsh.exe advfirewall set allprofiles state off
          Set-MpPreference -EnableNetworkProtection Disabled
          Set-MpPreference -DisableDatagramProcessing $True
        shell: pwsh

      - name: (Server) Start Secnetperf server
        if: ${{ matrix.role == 'server' }}
        run: |
          Start-Job -Name "SecnetperfServer" -ScriptBlock {
              .\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe
          }
          Write-Host "Secnetperf server started as a background process"
          Write-Host "Waiting for a bit..."
          Start-Sleep -Seconds 10
          Receive-Job -Name "SecnetperfServer"
        shell: pwsh

      - name: (Server) Upload IP address to shared cache
        if: ${{ matrix.role == 'server' }}
        run: |
          $ipAddress = (Get-NetIpAddress -AddressFamily IPv4).IpAddress
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ipaddress&value=$ipAddress" -Headers $headers
        shell: pwsh

      - name: (Client) Poll for an ip address uploaded by the server
        if: ${{ matrix.role == 'client' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure this is set in your repository's secrets
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ipaddress"
          do {
            Write-Output "Checking for ip address..."
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ip address. Status code: $($Response.StatusCode)"
              }
              $ipAddress = $Response.Content
              Write-Output "Ip Address found: $ipAddress"
              $serverIp = $ipAddress.split(" ")[0]
              Write-Output "Server IP: $serverIp"
              $found = $true
            }
            catch {
              Write-Output "Ip Address not found: $_"
              Start-Sleep -Seconds 5
            }
          } while (-not $found)

          Write-Host "Preparing to run secnetperf"
          "$serverIp netperf-peer" | Out-File -Encoding ASCII -Append "$env:SystemRoot\System32\drivers\etc\hosts"
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value 'netperf-peer' -Force

          Write-Host "Try running secnetperf"
          $Attempts = 0
          while ($Attempts -lt 5) {
            try {
              .\artifacts\bin\windows\x64_Release_schannel\secnetperf.exe -target:netperf-peer -exec:maxtput -down:12s -ptput:1 -io:iocp -pconn:1 -pstream:1
              break
            }
            catch {
              Write-Output "Failed to run secnetperf: $_"
              $Attempts++
              Start-Sleep -Seconds 5
            }
          }
        shell: pwsh

      - name: (Client) Upload ACK to shared cache
        if: ${{ matrix.role == 'client' }}
        run: |
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapiwebapp.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ack&value=ack" -Headers $headers
        shell: pwsh

      - name: (Server) Server polls for an ACK so it can clean up
        if: ${{ matrix.role == 'server' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapiwebapp.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ack"
          do {
            Write-Output "Checking for ACK..."
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ACK. Status code: $($Response.StatusCode)"
              }
              $ack = $Response.Content
              Write-Output "ACK found: $ack"
              $found = $true
            }
            catch {
              Write-Output "ACK not found: $_"
              Start-Sleep -Seconds 10
            }
          } while (-not $found)
        shell: pwsh
