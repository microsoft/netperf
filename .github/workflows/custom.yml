name: Custom Tasks

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Windows OS Version'
        required: false
        default: "2022"
        type: choice
        options:
          - "2025"
          - "2022"
          - "2019"

permissions: write-all

jobs:
  build-unix:
    name: Build Unix
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04']
        tls: [openssl] # , openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-unix.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}


  testjob:
    needs: [build-unix]
    strategy:
      matrix:
        role: ["client", "server"]
    runs-on: [self-hosted, 1ES.Pool=netperf-boosted-linux-pool]
    steps:
      - name: Install powershell
        run: |
          # Update the list of packages
          sudo apt-get update
          # Install pre-requisite packages.
          sudo apt-get install -y wget apt-transport-https software-properties-common
          # Download the Microsoft repository GPG keys
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release --release --short)/packages-microsoft-prod.deb
          # Register the Microsoft repository GPG keys
          sudo dpkg -i packages-microsoft-prod.deb
          # Update the list of products
          sudo apt-get update
          # Enable the "universe" repositories
          sudo add-apt-repository --yes universe

          # Check if PowerShell is available in the repository
          if apt-cache policy powershell | grep -q "Candidate:"; then
              echo "PowerShell is available in the repository. Installing..."
              # Install PowerShell from the repository
              sudo apt-get install -y powershell
          else
              echo "PowerShell is not available in the repository. Falling back to manual installation..."

              # Ensure we have the tools for GitHub communication
              sudo apt-get install -y curl jq

              # Create a temporary directory
              tmpDir=$(mktemp -d)

              # Fetch the latest release version of PowerShell from GitHub
              latest_version=$(curl -sSL https://api.github.com/repos/PowerShell/PowerShell/releases/latest | jq -r .tag_name)

              # Download the PowerShell package file
              echo "Downloading PowerShell package..."
              downloadUrl=$(curl -sSL "https://api.github.com/repos/PowerShell/PowerShell/releases/latest" |
                  jq -r '[.assets[] | select(.name | endswith("_amd64.deb")) | .browser_download_url][0]')
              curl -sSL "$downloadUrl" -o "$tmpDir/powershell.deb"

              # Download the hash file
              echo "Downloading hash file..."
              curl -sSL "https://github.com/PowerShell/PowerShell/releases/download/$latest_version/hashes.sha256" -o "$tmpDir/hashes.sha256"

              # Extract the hash for the downloaded deb file
              expected_hash=$(grep "$(basename "$downloadUrl")" "$tmpDir/hashes.sha256" | awk '{ print $1 }')

              # Calculate the hash of the downloaded file
              actual_hash=$(sha256sum "$tmpDir/powershell.deb" | awk '{ print $1 }')

              # Compare the hashes
              if [ "$expected_hash" != "$actual_hash" ]; then
                  echo "Hash mismatch! Exiting."
                  exit 1
              else
                  echo "Hash verified. Proceeding with installation."
              fi

              # Check if the required libicu72 is installed
              if ! dpkg -s libicu72 &>/dev/null; then
                  echo "libicu72 is not installed. Installing libicu72..."
                  # Get required libicu file
                  curl -sSL 'https://launchpad.net/ubuntu/+archive/primary/+files/libicu72_72.1-3ubuntu3_amd64.deb' -o "$tmpDir/libicu72_72.1-3ubuntu3_amd64.deb"
                  sudo dpkg --force-confold -i "$tmpDir/libicu72_72.1-3ubuntu3_amd64.deb"
              else
                  echo "libicu72 is already installed."
              fi

              # Install the PowerShell package
              echo "Installing PowerShell package..."
              sudo dpkg -i "$tmpDir/powershell.deb"

              # Resolve missing dependencies and finish the install (if necessary)
              echo "Resolving missing dependencies..."
              sudo apt-get install -f

              # Delete the downloaded package and hash files
              echo "Cleaning up temporary files..."
              rm -r "$tmpDir"
          fi
        shell: bash
      - name: (Server) Upload IP address to shared cache
        if: ${{ matrix.role == 'server' }}
        run: |
          $ipAddress = ip addr | grep 'inet ' | grep '10' | awk '{print $2}' | cut -d'/' -f1
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapi.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_ipaddress&value=$ipAddress" -Headers $headers -Method Post
        shell: pwsh

      - name: (Server) Checkout netperf repo
        if: ${{ matrix.role == 'server' }}
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          repository: microsoft/netperf
          ref: 'main'

      - name: (Client) Checkout microsoft/msquic
        if: ${{ matrix.role == 'client' }}
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          repository: microsoft/msquic
          ref: jackhe/cleanup-az1es

      - name: Download Artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
        with:
          name: Release-linux-ubuntu-20.04-x64-openssl-Perf
          path: artifacts

      - name: (Server) Polls for client instructions
        if: ${{ matrix.role == 'server' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $url = "https://netperfapi.azurewebsites.net"
          $ApprovedCommandsJson = Get-Content -Path "approved-commands.json" -Raw
          do {
            try {
              $Response = Invoke-WebRequest -Uri "$url/getkeyvalue?key=${{ github.run_id }}_state" -Headers $headers
              $data = $Response.Content
              if ($data -eq "done") {
                $found = $true
                break
              }
              $dataJson = ConvertFrom-Json $data
              if ($dataJson.SeqNum -lt $dataJson.Commands.Count) {
                $command = $dataJson.Commands[$dataJson.SeqNum]
                $dataJson.SeqNum++
                $dataJson = @{
                  value=$dataJson
                }
                $body = $dataJson | ConvertTo-Json
                ls ${{ github.workspace }}
                if ($ApprovedCommandsJson.contains($command)) {
                  Invoke-WebRequest -Uri "$url/setkeyvalue?key=${{ github.run_id }}_state" -Headers $headers -Method POST -Body $body -ContentType "application/json"
                  $fullPath = "${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl"
                  $SecNetPerfPath = "$fullPath/secnetperf"
                  $env:LD_LIBRARY_PATH = "${env:LD_LIBRARY_PATH}:$fullPath"
                  chmod +x "$SecNetPerfPath"
                  if ($command.contains("lowlat")) {
                    ${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl/secnetperf -exec:lowlat -io:epoll -stats:1 | Out-Null
                  } else {
                    ${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl/secnetperf -exec:maxtput -io:epoll -stats:1 | Out-Null
                  }
                } else {
                  Write-Output "Command not approved: $command"
                }
                Write-Host "Data: "
                $dataStr = $dataJson.toString()
                Write-Host $dataStr
              } else {
                Start-Sleep -Seconds 10
              }
            }
            catch {
              Write-Output "Client not done yet. Exit reason: $_"
              Start-Sleep -Seconds 30
            }
          } while (-not $found)
        shell: pwsh

      - name: (Client) Poll for an ip address uploaded by the server, set netperf-peer.
        if: ${{ matrix.role == 'client' }}
        run: |
          $found = $false
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $uri = "https://netperfapi.azurewebsites.net/getkeyvalue?key=${{ github.run_id }}_ipaddress"
          do {
            Write-Output "Checking for ip address..."
            try {
              $Response = Invoke-WebRequest -Uri $uri -Headers $headers
              if (!($Response.StatusCode -eq 200)) {
                throw "Failed to get ip address. Status code: $($Response.StatusCode)"
              }
              $ipAddress = $Response.Content
              Write-Output "Ip Address found: $ipAddress"
              $serverIp = $ipAddress
              Write-Output "Server IP: $serverIp"
              $found = $true
            }
            catch {
              Write-Output "Ip Address not found: $_"
              Start-Sleep -Seconds 5
            }
          } while (-not $found)
          Write-Host "Setting netperf-peer to $serverIp"
          echo "$serverIp netperf-peer" | sudo tee -a /etc/hosts
        shell: pwsh

      - name: (Client) Download Watermark_Regression.json file
        if: ${{ matrix.role == 'client' }}
        run: Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/netperf/sqlite/watermark_regression.json" -OutFile "watermark_regression.json"
        shell: pwsh

      - name: (Client) Run Secnetperf Script
        if: ${{ matrix.role == 'client' }}
        shell: pwsh
        timeout-minutes: 20
        run: ./scripts/secnetperf.ps1 `
            -LogProfile 'NULL' `
            -MsQuicCommit 'TODO' `
            -environment 'azure' `
            -plat 'linux' `
            -os 'ubuntu-18.04' `
            -arch 'x64' `
            -tls 'openssl' `
            -io 'epoll' `
            -filter ''
            -RemotePowershellSupported 'FALSE'
            -RunId ${{ github.run_id }}_state
            -SyncerSecret ${{ secrets.NETPERF_SYNCER_SECRET }}
      - name: (Client) Uploads ACK to shared cache
        if: ${{ matrix.role == 'client' }}
        run: |
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          Invoke-WebRequest -Uri "https://netperfapi.azurewebsites.net/setkeyvalue?key=${{ github.run_id }}_state&value=done" -Headers $headers -Method Post
        shell: pwsh