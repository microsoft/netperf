name: Exercise RDMA Datapath

on:
  workflow_dispatch:
    inputs:
      url:
        required: false
        default: 'NONE'
        type: string
      ref:
        description: 'Branch or Commit'
        required: true
        type: string
      repo:
        required: false
        default: microsoft/msquic
        type: string
      config:
        required: false
        default: 'Debug'
        type: string
        # options:
        #   - Debug
        #   - Release
      plat:
        required: false
        type: string
        default: 'windows'
        # options:
        #   - windows
        #   - uwp
        #   - winkernel
      os:
        required: false
        type: string
        default: 'windows-2022'
        # options:
        #   - windows-2019
        #   - windows-2022
      arch:
        required: false
        default: 'x64'
        type: string
        # options:
        #   - x86
        #   - x64
        #   - arm64
      tls:
        required: false
        default: 'schannel'
        type: string
        # options:
        #   - openssl
        #   - openssl3
        #   - schannel
      sanitize:
        required: false
        default: ''
        type: string
      build:
        required: false
        default: '-Test' # Empty string means build all
        type: string


permissions: write-all

jobs:
  build-windows:
    name: Build
    runs-on: ${{ inputs.os }}
    if: ${{ inputs.url == 'NONE' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        repository: ${{ inputs.repo}}
        ref: ${{ inputs.ref }}
    - name: Install Perl
      uses: shogo82148/actions-setup-perl@98dfedee230bcf1ee68d5b021931fc8d63f2016e
      with:
        perl-version: '5.34'
    - name: Install NASM
      uses: ilammy/setup-nasm@13cbeb366c45c4379d3478cdcbadd8295feb5028
    - name: Prepare Machine
      shell: pwsh
      run: scripts/prepare-machine.ps1 -ForBuild -Tls ${{ inputs.tls }} -InstallNetworkDirect
    - name: Build For Test
      if: inputs.build == '-Test'
      shell: pwsh
      run: scripts/build.ps1 -Config ${{ inputs.config }} -Platform ${{ inputs.plat }} -Arch ${{ inputs.arch }} -Tls ${{ inputs.tls }} -DisablePerf -DynamicCRT ${{ inputs.sanitize }}
    - name: Build External Platform Test
      if: inputs.build == '-Test'
      shell: pwsh
      run: |
        cmake --install build\${{ inputs.plat }}\${{ inputs.arch }}_${{ inputs.tls }} --config ${{ inputs.config }}
        cmake src/platform/unittest/external -G "Visual Studio 17 2022" -A ${{ inputs.arch }} -B build_external "-DCMAKE_INSTALL_PREFIX:PATH=C:/Program Files/msquic"
        cmake --build build_external --config ${{ inputs.config }}
    - name: Build For Perf
      if: inputs.build == '-Perf'
      shell: pwsh
      run: scripts/build.ps1 -Config ${{ inputs.config }} -Platform ${{ inputs.plat }} -Arch ${{ inputs.arch }} -Tls ${{ inputs.tls }} -DisableTools -DisableTest ${{ inputs.sanitize }}
    - name: Build
      if: inputs.build == ''
      shell: pwsh
      run: scripts/build.ps1 -Config ${{ inputs.config }} -Platform ${{ inputs.plat }} -Arch ${{ inputs.arch }} -Tls ${{ inputs.tls }} ${{ inputs.sanitize }}
    - name: Filter Build Artifacts
      shell: pwsh
      run: |
        Remove-Item artifacts/bin/xdp -Recurse -Force -ErrorAction Ignore
        Remove-Item artifacts/corenet-ci-main -Recurse -Force -ErrorAction Ignore
        Remove-Item artifacts/xdp -Recurse -Force -ErrorAction Ignore
    - name: Upload build artifacts
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08
      with:
        name: ${{ inputs.config }}-${{ inputs.plat }}-${{ inputs.os }}-${{ inputs.arch }}-${{ inputs.tls }}${{ inputs.sanitize }}${{ inputs.build }}
        path: artifacts


  run-msquic-rdma-datapath-test:
    name: Run MsQuic RDMA Datapath Test
    needs: [build-windows]
    runs-on:
      - self-hosted
      - 1ES.Pool=netperf-actual-boosted-winprerelease
      - 1ES.ImageOverride=managed-windows-2022-gen2-try3
    steps:
      - name: Checkout microsoft/msquic
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          repository: microsoft/msquic
          ref: ${{ inputs.ref }}
      - name: Download Artifacts (From Build)
        if: ${{ inputs.url == 'NONE' }}
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d
        with:
          name: Debug-windows-windows-2022-x64-schannel-Test
          path: artifacts
      - name: Download Artifacts (From URL)
        if: ${{ inputs.url != 'NONE' }}
        run: |
          mkdir artifacts
          Invoke-WebRequest -Uri ${{ inputs.url }} -OutFile artifacts.zip
          Expand-Archive -Path artifacts.zip -DestinationPath artifacts
        shell: pwsh
      - name: Install MANA drivers
        run: |
          $ProgressPreference = 'SilentlyContinue'
          # Install MANA drivers.
          Write-Host "Installing MANA drivers."
          try {
              $Tmp = New-TemporaryFile
              $Tmp = Rename-Item -Path $Tmp -NewName "$Tmp.zip" -PassThru
              $TmpDir = New-Item -Path "$Tmp.Dir" -ItemType "Directory"
              Invoke-WebRequest -Uri "https://aka.ms/manawindowsdrivers" -OutFile $Tmp
              Expand-Archive -Path $Tmp -Destination $TmpDir -Force
              pnputil.exe /add-driver "$TmpDir\mana_vf_drivers\mana\manavf.inf" /install
              pnputil.exe /add-driver "$TmpDir\mana_vf_drivers\mana_bus\mana_bus_vf.inf" /install
          } finally {
              Remove-Item $TmpDir -Recurse -ErrorAction SilentlyContinue
              Remove-Item $Tmp -ErrorAction SilentlyContinue
          }
        shell: pwsh
      - name: Prepare machine for RDMA
        if: ${{ inputs.url != 'NONE' }}
        run: .\scripts\prepare-machine.ps1 -ForTest -InstallNetworkDirect
        shell: pwsh
      - name: Install C++ Runtime DLL
        run: |
          $ArtifactsDir = ".\artifacts"
          $Platform = "x64"
          function Setup-VcRuntime {
              $Installed = $false
              try { $Installed = Get-ChildItem -Path Registry::HKEY_CLASSES_ROOT\Installer\Dependencies | Where-Object { $_.Name -like "*VC,redist*" } } catch {}

              if (!$Installed -or $Force) {
                  Write-Host "Installing VC++ runtime"

                  if (!(Test-Path $ArtifactsDir)) { mkdir artifacts }
                  Remove-Item -Force "$ArtifactsDir\vc_redist.$Platform.exe" -ErrorAction Ignore

                  # Download and install.
                  Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vc_redist.$Platform.exe" -OutFile "$ArtifactsDir\vc_redist.$Platform.exe"
                  & $ArtifactsDir\vc_redist.$Platform.exe /install /passive | Write-Verbose
              }
          }
          Setup-VcRuntime
      - name: Invoke executable directly to list test cases
        run: Invoke-Expression 'C:\a\_work\netperf\netperf\artifacts\bin\windows\x64_Debug_schannel\msquicplatformtest.exe --gtest_list_tests'
      - name: List test cases
        run: .\scripts\test.ps1 -ListTestCases
      - name: Run Datapath Test
        run: .\scripts\test.ps1 -Filter *DataPathTest*
        shell: pwsh
