name: "Start 1ES Machine"
description: "This action runs multiple steps as a composite action."
inputs:
  matrix:
    description: "The serialized matrix of values to use for the composite action."
    type: string
    required: true
  callback-script-path:
    description: "The script to run in the callback on the server process."
    type: string
    required: true
  syncer_secret:
    description: "Token required to interact with the remote cache"
    required: true
    type: string
runs:
  using: "composite"
  steps:
  - name: Set up Python
    if: ${{ env.OS == 'windows' }}
    uses: actions/setup-python@v2
    with:
      python-version: '3.x'
  - name: Run Python Script to Escape JSON
    if: ${{ env.OS == 'windows' }}
    id: escape_json
    run: |
      import json
      matrix = json.loads("""${{ inputs.matrix }}""")
      json_str = json.dumps(matrix).replace('"', '\\"').replace('\n', ' ').replace('\r', ' ')
      print(f"::set-output name=escaped_json::{json_str}")
    shell: python
  - name: Deserialize Matrix
    if: ${{ env.OS == 'windows' }}
    run: |
      "C:\Program Files\PowerShell\7\pwsh.exe" -Command "./netperfrepo/1es-machine-manager.ps1 -Action 'Deserialize_matrix' -GithubContextInput '${{ steps.escape_json.outputs.escaped_json }}'"
    shell: cmd
  - name: Deserialize Matrix
    if: ${{ env.OS != 'windows' }}
    run: |
      ./netperfrepo/1es-machine-manager.sh -Action 'Deserialize_matrix' -GithubContextInput1 '${{ inputs.matrix }}'
    shell: pwsh
  - name: Disable Windows Defender / Firewall
    if: ${{ env.OS == 'windows' }}
    run: |
      "C:\Program Files\PowerShell\7\pwsh.exe" -Command "./netperfrepo/1es-machine-manager.ps1 -Action 'Disable_Windows_Defender'"
    shell: cmd
  - name: (Server) Upload IP address to shared cache
    if: ${{ env.role == 'server' && env.OS == 'windows' }}
    run: |
      "C:\Program Files\PowerShell\7\pwsh.exe" -Command "./netperfrepo/1es-machine-manager.ps1 -Action 'Broadcast_IP' -GithubContextInput1 '${{ inputs.syncer_secret }}' -GithubContextInput2 '${{ github.run_id }}' -GithubContextInput3 '${{ env.env_str }}'"
    shell: cmd
  - name: (Server) Upload IP address to shared cache
    if: ${{ env.role == 'server' && env.OS != 'windows' }}
    run: |
      ./netperfrepo/1es-machine-manager.sh -Action 'Broadcast_IP' -GithubContextInput1 '${{ inputs.syncer_secret }} -GithubContextInput2 '${{ github.run_id }}' -GithubContextInput3 '${{ env.env_str }}''
    shell: pwsh 
  - name: (Client) Poll for an ip address uploaded by the server, set netperf-peer.
    if: ${{ env.role == 'client' && env.OS == 'windows' }}
    run: |
      "C:\Program Files\PowerShell\7\pwsh.exe" -Command "./netperfrepo/1es-machine-manager.ps1 -Action 'Poll_IP' -GithubContextInput1 '${{ inputs.syncer_secret }}' -GithubContextInput2 '${{ github.run_id }}' -GithubContextInput3 '${{ env.env_str }}'"
    shell: cmd
  - name: (Client) Poll for an ip address uploaded by the server, set netperf-peer.
    if: ${{ env.role == 'client' && env.OS != 'windows' }}
    run: |
      ./netperfrepo/1es-machine-manager.sh -Action 'Poll_IP' -GithubContextInput1 '${{ inputs.syncer_secret }}' -GithubContextInput2 '${{ github.run_id }}' -GithubContextInput3 '${{ env.env_str }}'
    shell: pwsh
  - name: (Server | no remote pwsh) Polls for client instructions from remote cache
    if: ${{ env.role == 'server' && env.remote_powershell_supported == 'FALSE' }}
    run: |
      $found = $false
      $headers = @{
        "secret" = "${{ inputs.syncer_secret }}"
      }
      $url = "https://netperfapi.azurewebsites.net"
      $ApprovedCommandsJson = Get-Content -Path "netperfrepo/approved-commands.json" -Raw
      do {
        try {
          $Response = Invoke-WebRequest -Uri "$url/getkeyvalue?key=${{ github.run_id }}-${{ env.env_str }}-state" -Headers $headers
          $data = $Response.Content
          if ($data -eq "done") {
            $found = $true
            break
          }
          $dataJson = ConvertFrom-Json $data
          if ($dataJson.SeqNum -lt $dataJson.Commands.Count) {
            $command = $dataJson.Commands[$dataJson.SeqNum]
            $dataJson.SeqNum++
            $dataJson = @{
              value=$dataJson
            }
            $body = $dataJson | ConvertTo-Json
            Invoke-WebRequest -Uri "$url/setkeyvalue?key=${{ github.run_id }}-${{ env.env_str }}-state" -Headers $headers -Method POST -Body $body -ContentType "application/json"
            $fullPath = "${{ github.workspace }}/artifacts/bin/linux/x64_Release_openssl"
            $SecNetPerfPath = "$fullPath/secnetperf"
            $env:LD_LIBRARY_PATH = "${env:LD_LIBRARY_PATH}:$fullPath"
            chmod +x "$SecNetPerfPath"
            ${{ inputs.callback-script-path }} -Command $command
            Write-Host "Data JSON: "
            $dataJson
          } else {
            Start-Sleep -Seconds 10
          }
        }
        catch {
          Write-Output "Client not done yet. Exit reason: $_"
          Start-Sleep -Seconds 30
        }
      } while (-not $found)
    shell: pwsh
